---
- name: Deploy Docker Installation Script
  hosts: all
  become: true  
  vars:
    script_source: /Users/brinketu/CloudlensFIle/cl_agent.sh
    script_dest: /usr/local/bin/cl_agent.sh
    cloudlens_manager_ip_or_FQDN: "{{ cloudlens_manager_ip_or_FQDN | default('default_ip_or_FQDN') }}"
    project_key: "{{ project_key | default('default_project_key') }}"
    custom_tags: "{{ custom_tags | default('default_tags') }}"
    set_insecure_registry: "{{ set_insecure_registry | default('n') }}"
    install_on_azure_vm: "{{ install_on_azure_vm | default('n') }}"
    install_on_aws: "{{ install_on_aws | default('n') }}"
    install_on_premise: "{{ install_on_premise | default('n') }}"

  tasks:
    - name: Ensure the destination directory exists
      file:
        path: /usr/local/bin/
        state: directory
        mode: '0755'

    - name: Copy Docker installation script to the instance
      copy:
        src: "{{ script_source }}"
        dest: "{{ script_dest }}"
        mode: '0755'

    - name: Run Docker installation script on AWS if applicable
      command: "{{ script_dest }}"
      args:
        chdir: /usr/local/bin
      environment:
        cloudlens_manager_ip_or_FQDN: "{{ cloudlens_manager_ip_or_FQDN }}"
        project_key: "{{ project_key }}"
        custom_tags: "{{ custom_tags }}"
        set_registry: "{{ set_insecure_registry }}"
      when: install_on_aws == 'y'

    - name: Run Docker installation script on Azure if applicable
      command: "{{ script_dest }}"
      args:
        chdir: /usr/local/bin
      environment:
        cloudlens_manager_ip_or_FQDN: "{{ cloudlens_manager_ip_or_FQDN }}"
        project_key: "{{ project_key }}"
        custom_tags: "{{ custom_tags }}"
        set_registry: "{{ set_insecure_registry }}"
      when: install_on_azure_vm == 'y'

    - name: Run Docker installation script on Premise if applicable
      command: "{{ script_dest }}"
      args:
        chdir: /usr/local/bin
      environment:
        cloudlens_manager_ip_or_FQDN: "{{ cloudlens_manager_ip_or_FQDN }}"
        project_key: "{{ project_key }}"
        custom_tags: "{{ custom_tags }}"
        set_registry: "{{ set_insecure_registry }}"
      when: install_on_premise == 'y'

    - name: Clean up script after execution
      file:
        path: "{{ script_dest }}"
        state: absent