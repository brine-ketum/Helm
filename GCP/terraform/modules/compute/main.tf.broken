# modules/compute/main.tf

locals {
  # Read Windows startup script
  windows_startup_script = var.windows_custom_startup_script != "" ? var.windows_custom_startup_script : file("${path.module}/user-data/windows-startup.ps1")
  
  # Generate metadata for different OS types
  linux_metadata = {
    ssh-keys = var.ssh_public_key != "" ? "${var.ssh_username}:${var.ssh_public_key}" : null
    startup-script = var.linux_startup_script
  }
  
  windows_metadata = {
    windows-startup-script-ps1 = local.windows_startup_script
    windows-shutdown-script-ps1 = var.windows_shutdown_script
  }
  # Clean metadata by removing null values
  clean_linux_metadata = { for k, v in local.linux_metadata : k => v if v != null }
  clean_windows_metadata = { for k, v in local.windows_metadata : k => v if v != null }

}

# Service Account for instances
resource "google_service_account" "instance_sa" {
  count = var.create_service_account ? 1 : 0
  
  account_id   = "${var.name_prefix}-sa"
  display_name = "Service Account for ${var.name_prefix} instances"
  description  = "Service account for compute instances"
}

# IAM roles for service account
resource "google_project_iam_member" "instance_sa_roles" {
  for_each = var.create_service_account ? toset(var.service_account_roles) : toset([])
  
  project = var.project_id
  role    = each.value
  member  = "serviceAccount:${google_service_account.instance_sa[0].email}"
}

# Instance Template
resource "google_compute_instance_template" "template" {
  count = var.create_template ? 1 : 0
  
  name_prefix    = "${var.name_prefix}-template-"
  machine_type   = var.machine_type
  can_ip_forward = var.can_ip_forward
  
  tags = concat(var.network_tags, var.additional_tags)
  
  labels = merge(
    var.labels,
    {
      managed-by = "terraform"
      os-type    = var.os_type
    }
  )
  
  metadata = var.os_type == "windows" ? merge(local.clean_windows_metadata, var.additional_metadata) : merge(local.clean_linux_metadata, var.additional_metadata)
  
  disk {
    source_image = var.source_image != "" ? var.source_image : var.source_image_family != "" ? "projects/${var.source_image_project}/global/images/family/${var.source_image_family}" : ""
    auto_delete  = true
    boot         = true
    disk_type    = var.boot_disk_type
    disk_size_gb = var.boot_disk_size
    
    dynamic "disk_encryption_key" {
      for_each = var.disk_encryption_key != "" ? [1] : []
      content {
        kms_key_self_link = var.disk_encryption_key
      }
    }
  }
  
  dynamic "disk" {
    for_each = var.additional_disks
    content {
      auto_delete  = lookup(disk.value, "auto_delete", true)
      boot         = false
      disk_size_gb = disk.value.disk_size_gb
      disk_type    = lookup(disk.value, "disk_type", "pd-standard")
      disk_name    = lookup(disk.value, "disk_name", null)
      device_name  = lookup(disk.value, "device_name", null)
      mode         = lookup(disk.value, "mode", "READ_WRITE")
      source       = lookup(disk.value, "source", null)
      source_image = lookup(disk.value, "source_image", null)
      type         = lookup(disk.value, "type", "PERSISTENT")
      
      dynamic "disk_encryption_key" {
        for_each = lookup(disk.value, "disk_encryption_key", "") != "" ? [1] : []
        content {
          kms_key_self_link = disk.value.disk_encryption_key
        }
      }
    }
  }
  
  network_interface {
    network    = var.network
    subnetwork = var.subnetwork
    
    dynamic "access_config" {
      for_each = var.enable_public_ip ? [1] : []
      content {
        nat_ip                 = var.static_ip
        public_ptr_domain_name = var.public_ptr_domain_name
        network_tier           = var.network_tier
      }
    }
    
    dynamic "alias_ip_range" {
      for_each = var.alias_ip_ranges
      content {
        ip_cidr_range         = alias_ip_range.value.ip_cidr_range
        subnetwork_range_name = lookup(alias_ip_range.value, "subnetwork_range_name", null)
      }
    }
  }
  
  service_account {
    email  = var.create_service_account ? google_service_account.instance_sa[0].email : var.service_account_email
    scopes = var.service_account_scopes
  }
  
  scheduling {
    automatic_restart           = var.automatic_restart
    on_host_maintenance        = var.on_host_maintenance
    preemptible                = var.preemptible
    provisioning_model         = var.spot ? "SPOT" : "STANDARD"
    instance_termination_action = var.spot ? var.spot_termination_action : null
    
    dynamic "node_affinities" {
      for_each = var.node_affinities
      content {
        key      = node_affinities.value.key
        operator = node_affinities.value.operator
        values   = node_affinities.value.values
      }
    }
  }
  
  shielded_instance_config {
    enable_secure_boot          = var.enable_secure_boot
    enable_vtpm                 = var.enable_vtpm
    enable_integrity_monitoring = var.enable_integrity_monitoring
  }
  
  confidential_instance_config {
    enable_confidential_compute = var.enable_confidential_compute
  }
  
  lifecycle {
    create_before_destroy = true
  }
}

# Individual Instances
resource "google_compute_instance" "instances" {
  for_each = var.instances
  
  name         = each.key
  machine_type = lookup(each.value, "machine_type", var.machine_type)
  zone         = lookup(each.value, "zone", var.zone)
  
  tags = concat(
    var.network_tags,
    lookup(each.value, "tags", [])
  )
  
  labels = merge(
    var.labels,
    lookup(each.value, "labels", {}),
    {
      managed-by = "terraform"
      os-type    = lookup(each.value, "os_type", var.os_type)
    }
  )
  
    metadata = lookup(each.value, "os_type", var.os_type) == "windows" ? merge(local.clean_windows_metadata, lookup(each.value, "metadata", {})) : merge(local.clean_linux_metadata, lookup(each.value, "metadata", {}))
  
  boot_disk {
    initialize_params {
      image = lookup(each.value, "source_image", var.source_image != "" ? var.source_image : "projects/${var.source_image_project}/global/images/family/${var.source_image_family}")
      type  = lookup(each.value, "boot_disk_type", var.boot_disk_type)
      size  = lookup(each.value, "boot_disk_size", var.boot_disk_size)
    }
    
    auto_delete = lookup(each.value, "boot_disk_auto_delete", true)
    
    dynamic "disk_encryption_key" {
      for_each = lookup(each.value, "disk_encryption_key", var.disk_encryption_key) != "" ? [1] : []
      content {
        kms_key_self_link = lookup(each.value, "disk_encryption_key", var.disk_encryption_key)
      }
    }
  }
  
  dynamic "attached_disk" {
    for_each = lookup(each.value, "additional_disks", var.additional_disks)
    content {
      source      = attached_disk.value.source
      device_name = lookup(attached_disk.value, "device_name", null)
      mode        = lookup(attached_disk.value, "mode", "READ_WRITE")
    }
  }
  }
  
  network_interface {
    network    = var.network
    subnetwork = lookup(each.value, "subnetwork", var.subnetwork)
    
    network_ip = lookup(each.value, "network_ip", null)
    
    dynamic "access_config" {
      for_each = lookup(each.value, "enable_public_ip", var.enable_public_ip) ? [1] : []
      content {
        nat_ip                 = lookup(each.value, "static_ip", var.static_ip)
        public_ptr_domain_name = lookup(each.value, "public_ptr_domain_name", var.public_ptr_domain_name)
        network_tier           = lookup(each.value, "network_tier", var.network_tier)
      }
    }
  }
  
  service_account {
    email  = var.create_service_account ? google_service_account.instance_sa[0].email : lookup(each.value, "service_account_email", var.service_account_email)
    scopes = lookup(each.value, "service_account_scopes", var.service_account_scopes)
  }
  
  scheduling {
    automatic_restart   = lookup(each.value, "automatic_restart", var.automatic_restart)
    on_host_maintenance = lookup(each.value, "on_host_maintenance", var.on_host_maintenance)
    preemptible        = lookup(each.value, "preemptible", var.preemptible)
    provisioning_model = lookup(each.value, "spot", var.spot) ? "SPOT" : "STANDARD"
  }
  
  shielded_instance_config {
    enable_secure_boot          = lookup(each.value, "enable_secure_boot", var.enable_secure_boot)
    enable_vtpm                 = lookup(each.value, "enable_vtpm", var.enable_vtpm)
    enable_integrity_monitoring = lookup(each.value, "enable_integrity_monitoring", var.enable_integrity_monitoring)
  }
  
  allow_stopping_for_update = var.allow_stopping_for_update
  
  timeouts {
    create = "30m"
    update = "30m"
    delete = "30m"
  }
}

# Instance Group (for managed instances)
resource "google_compute_instance_group_manager" "mig" {
  count = var.create_instance_group ? 1 : 0
  
  name               = "${var.name_prefix}-mig"
  base_instance_name = var.name_prefix
  zone               = var.zone
  
  version {
    instance_template = google_compute_instance_template.template[0].id
    name              = "primary"
  }
  
  target_size = var.instance_group_target_size
  
  dynamic "named_port" {
    for_each = var.named_ports
    content {
      name = named_port.value.name
      port = named_port.value.port
    }
  }
  
  dynamic "auto_healing_policies" {
    for_each = var.health_check_id != "" ? [1] : []
    content {
      health_check      = var.health_check_id
      initial_delay_sec = var.health_check_initial_delay
    }
  }
  
  update_policy {
    type                           = var.update_policy_type
    minimal_action                 = var.update_policy_minimal_action
    most_disruptive_allowed_action = var.update_policy_most_disruptive_action
    max_surge_fixed                = var.update_policy_max_surge_fixed
    max_unavailable_fixed          = var.update_policy_max_unavailable_fixed
    replacement_method             = var.update_policy_replacement_method
  }
  
  timeouts {
    create = "30m"
    update = "30m"
    delete = "30m"
  }
}
